/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package e4etagwriter;

import com.fazecast.jSerialComm.SerialPort;
import static e4etagwriter.SerialComm.commPortParameter;
import static e4etagwriter.Login.lp;
import static e4etagwriter.SerialComm.dataLen;
import static e4etagwriter.SerialComm.recvData;
import static e4etagwriter.SerialComm.selectedPort;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.Arrays;
import java.util.Scanner;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author shubham
 */
public class EditTagPage extends javax.swing.JFrame {

    /**
     * Creates new form EditTagPage
     */
    public EditTagPage() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        vehicleListTable = new javax.swing.JTable();
        refreshBtn = new javax.swing.JButton();
        writeTagBtn = new javax.swing.JButton();
        readBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        vehicleListTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Registration Number", "Max Fuel Limit"
            }
        ));
        jScrollPane1.setViewportView(vehicleListTable);

        refreshBtn.setText("Refresh");
        refreshBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshBtnActionPerformed(evt);
            }
        });

        writeTagBtn.setText("Write");
        writeTagBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                writeTagBtnActionPerformed(evt);
            }
        });

        readBtn.setText("Read");
        readBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(refreshBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(readBtn)
                        .addGap(18, 18, 18)
                        .addComponent(writeTagBtn))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(42, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(refreshBtn)
                    .addComponent(writeTagBtn)
                    .addComponent(readBtn))
                .addContainerGap(57, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void refreshBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshBtnActionPerformed
        //just for testing jserialcomm library
        String vehicleListResp;
        char[] regNo = new char[11];
        char[] maxFuelLimit = new char[5];
        int index = 0;
        try
        {
            HttpRequest getRequest = HttpRequest.newBuilder()
                .GET()
                .timeout(Duration.ofSeconds(10))
                .uri(URI.create((lp.URL + lp.getVehicleListRequest + lp.getAccessToken())))
                .build();
            HttpClient client = HttpClient.newHttpClient();
            HttpResponse<String> response = client.send(getRequest, HttpResponse.BodyHandlers.ofString());
            vehicleListResp = response.body();
            //buff = loginResp.toCharArray();
            
            System.out.print(getRequest);
            System.out.print(vehicleListResp);
            
            int noOfVehicle = 0;
            
            
            for(int i = 0; i < vehicleListResp.length(); i++)
            {
                if(vehicleListResp.charAt(i) == ',')
                {
                    noOfVehicle++;
                }
            }
            
            System.out.println("\nNumber of Vehicle : " + noOfVehicle);
            
            DefaultTableModel tblModel = (DefaultTableModel)vehicleListTable.getModel();
            tblModel.setRowCount(0);
            char[] list = vehicleListResp.toCharArray();
            while(list[index++] != '"');
            
            while(list[index] != '"')
            {
                regNo = Arrays.copyOfRange(list, index, index + 10);
                index += 10;
                maxFuelLimit = Arrays.copyOfRange(list, index, index + 4);
                index += 5;
                System.out.println("index:" + index + " " + new String(regNo).replaceAll("@", "") + " " + new String(maxFuelLimit));
                Object[] data = {new String(regNo).replaceAll("@", ""),Integer.valueOf(new String(maxFuelLimit))};
                //System.out.println(a);
                tblModel.addRow(data);
            }
            
        }
        catch(Exception e1) {
                // TODO Auto-generated catch block
            e1.printStackTrace();
        }
    }//GEN-LAST:event_refreshBtnActionPerformed

    private void readBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readBtnActionPerformed
        byte[] buffer = new byte[10];
        int index = 0,length;
        int maxFuelLimit = 0;
        byte[] regNo = new byte[10];
        byte[] uid = new byte[7];
        buffer[index++] = (byte) 0xAA;
        buffer[index++] = (byte) 0x01;
        buffer[index++] = (byte) 0x00;
        buffer[index++] = (byte) 0x00;
        buffer[index++] = (byte) 0x55;
        commPortParameter.selectedPort.writeBytes(buffer, index);
        commPortParameter.dataLen = 0;
        commPortParameter.selectedPort.setComPortTimeouts(SerialPort.TIMEOUT_READ_BLOCKING, commPortParameter.READ_TIMEOUT, 0);
        if(commPortParameter.selectedPort.bytesAvailable() > 0)
        {
            int readLen = selectedPort.bytesAvailable();
                int len = selectedPort.readBytes(recvData, readLen);
                System.out.println("data read blocking");
                for(int i = 0; i < readLen; i++)
                {
                    System.out.print(String.format(" %02X", recvData[i]));
                }
                //now we can decode the complete data;
                //decode the data and show it to the Dialog box
                
                int i = 0;
                if((recvData[i++]&0xFF) != 0xAA)
                {
                    System.out.println("header not found");
                    return;
                }
                length = (recvData[i++] & 0xFF);
                if((recvData[i++] & 0x7F) != 0x00)
                {
                    System.out.println("invalid response code");
                    return;
                }
                if((length == 0x02) && ((recvData[i++] & 0x7F) != 0x03))
                {
                    System.out.println("nack");
                    return;
                }
                i++;//skipping checksum
                if((recvData[i++] & 0x7F) != 0x55)
                {
                    System.out.println("no footer");
                    return;
                }
                
                System.out.println("first response ok");
                
                if((recvData[i++]&0xFF) != 0xAA)
                {
                    System.out.println("second header not found");
                    return;
                }
                length = (recvData[i++] & 0xFF);
                if(((recvData[i++] & 0x7F) != 0x00))
                {
                    System.out.println("second invalid response code");
                    return;
                }
                
                if(((recvData[i] & 0x7F) == 0x14))
                {
                    System.out.println("no tag found");
                    JOptionPane.showMessageDialog(this, "No Tag Found", "Tag Read",JOptionPane.ERROR_MESSAGE);
                    return;
                }
                System.out.println("tag found " + String.format("%02X", recvData[i]));
                //System.arraycopy(recvData, i, regNo, 0, 10);
                index = 0;
                for(int j = 0; j < 10; j++)
                {
                    //if((recvData[i]) != '@')
                    if(Character.isAlphabetic(recvData[i]) || Character.isDigit(recvData[i]))
                    {
                        regNo[index++] = recvData[i];
                    }
                    i++;
                }
                System.out.println("reg no : ");
                for(int j = 0; j < index; j++)
                {
                    System.out.print(String.format("%c", regNo[j]));
                }
                maxFuelLimit = (recvData[i++] & 0xFF);
                maxFuelLimit |= ((recvData[i++] & 0xFF) << 8);
                System.out.println("fuel limit : " + maxFuelLimit);
                
                i += 4;
                index = 0;
                for(int j = 0; j < 7; j++)
                {
                    uid[index++] = recvData[i++];
                }
                System.out.println("uid : ");
                for(int j = 0; j < index; j++)
                {
                    System.out.print(String.format("%02X ", uid[j]));
                }
                JOptionPane.showMessageDialog(this, "Tag Read Succesful", "Tag Read",JOptionPane.INFORMATION_MESSAGE);
//                if((recvData[i++] & 0x7F) != 0x55)
//                {
//                    System.out.println("no footer");
//                    return;
//                }
        }
        else
        {
            System.out.print("No data avl");
        }
    }//GEN-LAST:event_readBtnActionPerformed

    private void writeTagBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_writeTagBtnActionPerformed
        // TODO add your handling code here:

        
        //read from tag
        byte[] buffer = new byte[10];
        int index = 0,length;
        int maxFuelLimit = 0;
        byte[] regNo = new byte[10];
        byte[] uid = new byte[7];
        buffer[index++] = (byte) 0xAA;
        buffer[index++] = (byte) 0x01;
        buffer[index++] = (byte) 0x00;
        buffer[index++] = (byte) 0x00;
        buffer[index++] = (byte) 0x55;
        commPortParameter.selectedPort.writeBytes(buffer, index);
        commPortParameter.dataLen = 0;
        commPortParameter.selectedPort.setComPortTimeouts(SerialPort.TIMEOUT_READ_BLOCKING, commPortParameter.READ_TIMEOUT, 0);
        if (commPortParameter.selectedPort.bytesAvailable() > 0) {
            int readLen = selectedPort.bytesAvailable();
            int len = selectedPort.readBytes(recvData, readLen);
            System.out.println("data read blocking");
            for (int i = 0; i < readLen; i++) {
                System.out.print(String.format(" %02X", recvData[i]));
            }
            //now we can decode the complete data;
            //decode the data and show it to the Dialog box
                            int i = 0;
                if((recvData[i++]&0xFF) != 0xAA)
                {
                    System.out.println("header not found");
                    return;
                }
                length = (recvData[i++] & 0xFF);
                if((recvData[i++] & 0x7F) != 0x00)
                {
                    System.out.println("invalid response code");
                    return;
                }
                if((length == 0x02) && ((recvData[i++] & 0x7F) != 0x03))
                {
                    System.out.println("nack");
                    return;
                }
                i++;//skipping checksum
                if((recvData[i++] & 0x7F) != 0x55)
                {
                    System.out.println("no footer");
                    return;
                }
                
                System.out.println("first response ok");
                
                if((recvData[i++]&0xFF) != 0xAA)
                {
                    System.out.println("second header not found");
                    return;
                }
                length = (recvData[i++] & 0xFF);
                if(((recvData[i++] & 0x7F) != 0x00))
                {
                    System.out.println("second invalid response code");
                    return;
                }
                
                if(((recvData[i] & 0x7F) == 0x14))
                {
                    System.out.println("no tag found");
                    JOptionPane.showMessageDialog(this, "No Tag Found", "Tag Read",JOptionPane.ERROR_MESSAGE);
                    return;
                }
                System.out.println("tag found " + String.format("%02X", recvData[i]));
                //System.arraycopy(recvData, i, regNo, 0, 10);
                index = 0;
                for(int j = 0; j < 10; j++)
                {
                    //if((recvData[i]) != '@')
                    if(Character.isAlphabetic(recvData[i]) || Character.isDigit(recvData[i]))
                    {
                        regNo[index++] = recvData[i];
                    }
                    i++;
                }
                System.out.println("reg no : ");
                for(int j = 0; j < index; j++)
                {
                    System.out.print(String.format("%c", regNo[j]));
                }
                maxFuelLimit = (recvData[i++] & 0xFF);
                maxFuelLimit |= ((recvData[i++] & 0xFF) << 8);
                System.out.println("fuel limit : " + maxFuelLimit);
                
                i += 4;
                index = 0;
                for(int j = 0; j < 7; j++)
                {
                    uid[index++] = recvData[i++];
                }
                System.out.println("uid : ");
                for(int j = 0; j < index; j++)
                {
                    System.out.print(String.format("%02X ", uid[j]));
                }
        } else {
            System.out.print("No data avl");
        }
        //read registration number from the table
        
        //String regNo = vehicleListTable.getModel().getValueAt(vehicleListTable.getSelectedRow(), 0).toString();
        //String maxFuelLimit = vehicleListTable.getModel().getValueAt(vehicleListTable.getSelectedRow(), 1).toString();
        //System.out.println("Selected Data : " + regNo + " " + maxFuelLimit);
        
        //combine registration number from the table and the UID from the tag
        
        //send verify request
        try
        {
            HttpRequest getRequest = HttpRequest.newBuilder()
                    .GET()
                    .timeout(Duration.ofSeconds(10))
                    .uri(URI.create((lp.URL + lp.verifyVehicleRequest + lp.getAccessToken() /*+ reg no + uid*/ )))
                    .build();
            HttpClient client = HttpClient.newHttpClient();
            System.out.println("logout request prepared");
            HttpResponse<String> response = client.send(getRequest, HttpResponse.BodyHandlers.ofString());
            String verifyVehicleResp = response.body();
            //buff = loginResp.toCharArray();

            System.out.print(getRequest);
            System.out.print(verifyVehicleResp);
            /*
            if(response is note update and allow)
                return error;
            
            */
        }catch(Exception e)
        {

        }
        //prepare buffer for write command
        
        //send command to write tag
        commPortParameter.selectedPort.writeBytes(buffer, index);
        commPortParameter.dataLen = 0;
        commPortParameter.selectedPort.setComPortTimeouts(SerialPort.TIMEOUT_READ_BLOCKING, commPortParameter.READ_TIMEOUT, 0);
        if (commPortParameter.selectedPort.bytesAvailable() > 0) {
            int readLen = selectedPort.bytesAvailable();
            int len = selectedPort.readBytes(recvData, readLen);
            System.out.println("data read blocking");
            for (int i = 0; i < readLen; i++) {
                System.out.print(String.format(" %02X", recvData[i]));
            }
            //now we can decode the complete data;
            //decode the data and show it to the Dialog box
        } else {
            System.out.print("No data avl");
        }
        //check the succesful of tag write
    }//GEN-LAST:event_writeTagBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EditTagPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EditTagPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EditTagPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EditTagPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EditTagPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton readBtn;
    private javax.swing.JButton refreshBtn;
    private javax.swing.JTable vehicleListTable;
    private javax.swing.JButton writeTagBtn;
    // End of variables declaration//GEN-END:variables
}
